name: 'Deployment Tests'

on:
  push:
    branches:
      - master

jobs:
  unit-tests:
    name: 'Deployment tests'
    runs-on: ubuntu-latest
    if: contains(github.head_ref, 'mcp')
    env:
      working-directory: ./tests/mcp/deployment
      GCP_PROJECT_ID: "mcpdeploytest-${GITHUB_SHA::8}"

    defaults:
      run:
        shell: bash
        working-directory: ${{env.working-directory}}

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      # Install the latest version of Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{secrets.GCP_SA_KEY}}
          export_default_credentials: true

      - name: Setup GCP
        run: |
          gcloud projects create ${{env.GCP_PROJECT_ID}} --folder=${{secrets.GCP_FOLDER_ID}} --set-as-default
          gcloud components install beta --quiet
          gcloud beta billing projects link ${{env.GCP_PROJECT_ID}} --billing-account=${{secrets.GCP_BILLING_ID}}
          gcloud services enable cloudresourcemanager.googleapis.com
          gcloud services enable cloudbuild.googleapis.com
          gcloud services enable appengine.googleapis.com
          gcloud services enable artifactregistry.googleapis.com
          gcloud config set compute/zone europe-west2
          gcloud iam service-accounts create ga-deploy --description="Deploy with github actions" --display-name="Deploy github"
          gcloud projects add-iam-policy-binding ga-test-0212 --member="serviceAccount:ga-deploy@${{env.GCP_PROJECT_ID}}.iam.gserviceaccount.com" --role="roles/owner"
          cd GCP/app/build/helloworld
          gsutil mb -l europe-west2 gs://${{env.GCP_PROJECT_ID}}_bucket
          gsutil mb -l europe-west2 gs://${{env.GCP_PROJECT_ID}}_cloudbuild
          gcloud artifacts repositories create app-repo --repository-format=docker --location=europe-west2 --description="Repository for storing app"
          gcloud builds submit --tag europe-west2-docker.pkg.dev/ga-test-0212/app-repo/helloworld
          cd ../../..
          echo 'name: ${{env.GCP_PROJECT_ID}}_bucket' > project.yml
          echo 'project_id: ${{env.GCP_PROJECT_ID}}' | cat - gcp_ae.yml > temp && mv temp gcp_ae.yml
          echo 'image_uri: &image_uri europe-west2-docker.pkg.dev/${{env.GCP_PROJECT_ID}}/app-repo/hello-world' | cat - gcp_cloudrun.yml > temp && mv temp gcp_cloudrun.yml
          echo 'project_id: ${{env.GCP_PROJECT_ID}}' | cat - gcp_cloudrun.yml > temp && mv temp gcp_cloudrun.yml

      - name: Deploy GCP modules
        run: |
          cd GCP
          mkdir terraform
          cd terraform
          touch main.tf
          {
            echo "terraform {"
            echo "  backend \"gcs\"{"
            echo "    bucket = \"${{env.GCP_PROJECT_ID}}_bucket\""
            echo "    prefix = \"tf-state-files\""
            echo "  }"
            echo "}"
            echo "module gcp {"
            echo "  source = \"../../../../../mcp\""
            echo "}"
          } > main.tf
          cat main.tf
          terraform init
          terraform refresh
          terraform plan -out="./plan.tfplan"

      - name: setup kubectl
        run: |
          CREATE=false
          gcloud components install kubectl
          gcloud services enable container.googleapis.com
          response=$(gcloud container clusters describe mcpdeploytest-cluster || echo "ClusterNotFound")
          if [[ $response = "ClusterNotFound" ]]
          then
            echo "Creating cluster"
            gcloud container clusters create mcpdeploytest-cluster --num-nodes=1
          else
            echo "Cluster exists"
          fi
          gcloud container clusters get-credentials mcpdeploytest-cluster

      - name: deploy k8s
        run: |
          cd k8s
          mkdir terraform
          cd terraform
          touch main.tf
          {
            echo "terraform {"
            echo "  backend \"gcs\"{"
            echo "    bucket = \"${{env.GCP_PROJECT_ID}}_bucket\""
            echo "    prefix = \"tf-state-files\""
            echo "  }"
            echo "}"
            echo "module k8s {"
            echo "  source = \"../../../../../mcp\""
            echo "}"
          } > main.tf
          cat main.tf
          terraform init
          terraform refresh
          terraform plan -out="./plan.tfplan"
          terraform apply plan.tfplan
          terraform plan -destroy -out="./destroy.tfplan"
          terraform apply destroy.tfplan

      - name: delete project
        run: gcloud projects delete ${{env.GCP_PROJECT_ID}}

      - name: error cleanup
        if: ${{ failure() }}
        run: gcloud projects delete ${{env.GCP_PROJECT_ID}}



      #TODO: Deploy AWS